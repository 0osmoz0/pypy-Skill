import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
  try {
    const { code } = await req.json();

    if (!code || typeof code !== 'string') {
      return NextResponse.json({ error: 'Code Python requis' }, { status: 400 });
    }

    // Simulation d'un interpr√©teur Python simple
    const result = executePythonCode(code);

    return NextResponse.json({ 
      output: result.output,
      error: result.error 
    });

  } catch (error) {
    console.error('Erreur lors de l\'ex√©cution Python:', error);
    return NextResponse.json({ error: 'Erreur interne du serveur' }, { status: 500 });
  }
}

// Simulateur Python simple pour les missions
function executePythonCode(code: string): { output: string; error?: string } {
  try {
    // Nettoyer le code
    const cleanCode = code.trim();
    
    // Gestion sp√©cifique pour le code de d√©cryptage des codes de porte avec tests unitaires automatiques
    if (cleanCode.includes('decoder_code_porte') && cleanCode.includes('Mission: D√©cryptage des codes de porte')) {
      const outputs: string[] = [];
      
      // V√©rifier si la fonction est impl√©ment√©e correctement
      const hasCorrectImplementation = (cleanCode.includes('if code % 2 == 0:') || cleanCode.includes('if code %2 == 0:')) && 
                                      cleanCode.includes('return "pair - Acc√®s normal"') &&
                                      cleanCode.includes('return "impair - Acc√®s restreint"') &&
                                      cleanCode.includes('else:');
      
      // V√©rifier s'il y a des erreurs de syntaxe sp√©cifiques
      const hasSyntaxError = cleanCode.includes('code %2 = 0') || 
                            (cleanCode.includes('Codes pairs = Acc√®s normal') && !cleanCode.includes('# Codes pairs = Acc√®s normal')) ||
                            (cleanCode.includes('Codes impairs = Acc√®s restreint') && !cleanCode.includes('# Codes impairs = Acc√®s restreint'));
      
      const hasImplementation = hasCorrectImplementation && !hasSyntaxError;
      
      // Debug pour voir ce qui se passe
      console.log('Debug API:', {
        hasCorrectImplementation,
        hasSyntaxError,
        hasImplementation,
        cleanCode: cleanCode.substring(0, 200) + '...'
      });
      
      // Ex√©cuter les tests unitaires automatiquement
      outputs.push('üß™ Tests unitaires en cours...');
      
      if (!hasImplementation) {
        outputs.push('‚ùå Test 1 √©chou√©: 42 devrait √™tre pair');
        outputs.push('‚ùå Test 2 √©chou√©: 17 devrait √™tre impair');
        outputs.push('‚ùå Test 3 √©chou√©: 100 devrait √™tre pair');
        outputs.push('‚ùå Test 4 √©chou√©: 73 devrait √™tre impair');
        outputs.push('‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez votre code.');
        outputs.push('');
        
        if (hasSyntaxError) {
          outputs.push('üö® Erreur de syntaxe d√©tect√©e !');
          if (cleanCode.includes('code %2 = 0')) {
            outputs.push('‚ùå Utilisez == au lieu de = pour la comparaison');
          }
          if (cleanCode.includes('Codes pairs = Acc√®s normal')) {
            outputs.push('‚ùå Le texte de retour doit √™tre exactement "pair - Acc√®s normal"');
          }
          if (cleanCode.includes('Codes impairs = Acc√®s restreint')) {
            outputs.push('‚ùå Le texte de retour doit √™tre exactement "impair - Acc√®s restreint"');
          }
          outputs.push('');
        }
        
        outputs.push('üí° Indice: Utilisez l\'op√©rateur modulo (%) pour d√©terminer si un nombre est pair ou impair');
        outputs.push('üí° Un nombre est pair si le reste de sa division par 2 est 0');
        outputs.push('üí° N\'oubliez pas le else: pour g√©rer les nombres impairs');
      } else {
        outputs.push('‚úÖ Test 1 r√©ussi: 42 est bien pair');
        outputs.push('‚úÖ Test 2 r√©ussi: 17 est bien impair');
        outputs.push('‚úÖ Test 3 r√©ussi: 100 est bien pair');
        outputs.push('‚úÖ Test 4 r√©ussi: 73 est bien impair');
        outputs.push('üéâ Tous les tests sont pass√©s ! Mission accomplie !');
      }
      
      return { output: outputs.join('\n') };
    }
    
    // Simulation des cas de base pour les missions
    if (cleanCode.includes('name = "Mathis"') && cleanCode.includes('print(f"Bonjour, {name} !")')) {
      return { output: 'Bonjour, Mathis !' };
    }
    
    if (cleanCode.includes('name = "Mathis"') && cleanCode.includes('print(f"Bonjour, {name}")')) {
      return { output: 'Bonjour, Mathis' };
    }
    
    // Gestion des variables avec f-strings
    const printMatches = cleanCode.match(/print\(f?"([^"]*\{[^}]+\}[^"]*)"\)/g);
    if (printMatches) {
      for (const match of printMatches) {
        if (match.includes('{name}')) {
          // Chercher la variable name
          const nameMatch = cleanCode.match(/name\s*=\s*"([^"]+)"/);
          if (nameMatch) {
            const name = nameMatch[1];
            const result = match.replace(/\{name\}/g, name).replace(/print\(f?"/, '').replace(/"\)/, '');
            return { output: result };
          }
        }
      }
    }
    
    // Gestion plus flexible des f-strings
    const fStringMatches = cleanCode.match(/print\(f"([^"]+)"\)/g);
    if (fStringMatches) {
      for (const match of fStringMatches) {
        if (match.includes('{name}')) {
          const nameMatch = cleanCode.match(/name\s*=\s*"([^"]+)"/);
          if (nameMatch) {
            const name = nameMatch[1];
            const template = match.replace(/print\(f"/, '').replace(/"\)/, '');
            const result = template.replace(/\{name\}/g, name);
            return { output: result };
          }
        }
      }
    }
    
    // Gestion des fonctions math√©matiques simples
    if (cleanCode.includes('calculate_distance') && cleanCode.includes('math.sqrt')) {
      return { output: '5.0' };
    }
    
    if (cleanCode.includes('import math') && cleanCode.includes('math.sqrt((3-0)**2 + (4-0)**2)')) {
      return { output: '5.0' };
    }
    
    // Gestion des boucles for
    if (cleanCode.includes('for i in range(1, 6):') && cleanCode.includes('print(f"Syst√®me solaire {i} visit√©")')) {
      return { 
        output: 'Syst√®me solaire 1 visit√©\nSyst√®me solaire 2 visit√©\nSyst√®me solaire 3 visit√©\nSyst√®me solaire 4 visit√©\nSyst√®me solaire 5 visit√©' 
      };
    }
    
    // Gestion des print simples
    const simplePrintMatches = cleanCode.match(/print\("([^"]+)"\)/g);
    if (simplePrintMatches) {
      const outputs = simplePrintMatches.map(match => 
        match.replace(/print\("/, '').replace(/"\)/, '')
      );
      return { output: outputs.join('\n') };
    }
    
    // Si on ne reconna√Æt pas le pattern, essayer d'ex√©cuter des print basiques
    const allPrintMatches = cleanCode.match(/print\([^)]+\)/g);
    if (allPrintMatches) {
      // Simulation tr√®s basique
      const outputs: string[] = [];
      
      for (const printStmt of allPrintMatches) {
        if (printStmt.includes('"Bonjour"') || printStmt.includes("'Bonjour'")) {
          if (printStmt.includes('{name}')) {
            const nameMatch = cleanCode.match(/name\s*=\s*"([^"]+)"/);
            if (nameMatch) {
              outputs.push(`Bonjour, ${nameMatch[1]} !`);
            } else {
              outputs.push('Bonjour, VotreNom !');
            }
          } else {
            outputs.push('Bonjour !');
          }
        } else if (printStmt.includes('"Syst√®me solaire"') || printStmt.includes("'Syst√®me solaire'")) {
          outputs.push('Syst√®me solaire 1 visit√©\nSyst√®me solaire 2 visit√©\nSyst√®me solaire 3 visit√©\nSyst√®me solaire 4 visit√©\nSyst√®me solaire 5 visit√©');
        } else {
          outputs.push('Code ex√©cut√©');
        }
      }
      
      return { output: outputs.join('\n') };
    }
    
    // Si aucun pattern reconnu
    return { 
      error: 'Code non reconnu. Essayez de suivre les exemples fournis dans les missions.' 
    };
    
  } catch (error) {
    return { 
      error: `Erreur d'ex√©cution: ${error}` 
    };
  }
}
